grammar UriTemplate

  rule uri_template
    uri_element more_elements:(uri_element)* {
      def value(env={})
        uri_element.value(env) << more_elements.elements.map{|el| el.value(env)}.join
      end
    }
  end
  
  rule uri_element
    expansion / uri_part
  end

  rule expansion
    '{' key:(var / operator) '}' {
        def value(env={} )
	  env[name]
        end
	def name
	  key.text_value
	end
    } 
  end

  rule uri_part
    (alphanumeric+ / ':' / '/' / '.' / '?' / '&' / '=') {
          def value(env = {})
            #"def uri_part value"
            text_value
          end
        }
  end
 
  rule arg
    (reserved / unreserved / pct_encoded)*
  end

  rule op
    alpha+
  end

  rule vars
    var ("," vars)*
  end
  
  rule unreserved
    alphanumeric / '-' / '&' / '/' / ','
  end

  rule pct_encoded
    alpha+
  end

  rule reserved
    [:/?#\[\]@!$&'()*+,;=]
  end

  rule vardefault
    (unreserved / pct_encoded)*  
  end

  rule var
    varname ('=' vardefault)*
  end

  rule operator
    "-" op "|" arg "|" vars
  end
  
  rule varname
    [a-zA-Z0-9] [a-zA-Z0-9_.-]*
  end

  rule alpha
    [A-Za-z_]
  end

  rule alphanumeric
    alpha / [0-9]
  end

end
