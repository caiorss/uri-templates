# Sequences and all types of terminals are node-instantiating expressions.
#
# Nonterminal and ordered choice expressions do not instantiate new nodes, 
# but rather pass through nodes that are instantiated by other expressions.
# They can extend nodes they propagate with anonymous or declared modules, 
# using similar constructs used with expressions that instantiate their own syntax nodes.
# Note that a choice must always be parenthesized to be associated with a following block.

#    op          = 1*ALPHA
#    arg         = *(reserved / unreserved / pct-encoded)
#    var         = varname [ '=' vardefault ]
#    vars        = var [ *("," var) ]
#    varname     = (ALPHA / DIGIT)*(ALPHA / DIGIT / "." / "_" / "-" )
#    vardefault  = *(unreserved / pct-encoded)
#    operator    = "-" op "|" arg "|" vars
#    expansion   = "{" ( var / operator ) "}"

  rule s        # Optional space
    S?
  end

  rule white
    [ \t\n\r]+
  end

  rule non_space_char
    ![ \n] .
  end

  # Any but not variable boundaries
  rule any
        .
  end

  rule whitespace
    [\s]*
  end

#  rule variable
#    [a-z]+ {
#      def eval(env={})
#        env[name]
#      end
#      
#      def name
#        text_value
#      end
#    }
#  end
